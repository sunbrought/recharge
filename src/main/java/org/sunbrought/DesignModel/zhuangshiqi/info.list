装饰器模式是一种结构型模式，它可以允许开发人员在不修改现有对象的情况下，动态地添加新功能。装饰器模式通过将一个对象包装在另一个对象中来扩展它的行为，从而提高了代码的灵活性和可重用性。
应用场景


当需要在不修改现有对象结构的前提下增加新的功能或特性时，可以使用装饰器模式。这样可以保持原有代码的稳定性和兼容性，同时也可以增加代码的灵活性和可扩展性。


当需要动态地向对象添加或删除功能时，可以使用装饰器模式。这样可以在运行时动态地添加或删除功能，而不需要修改现有的代码。


当需要为多个对象添加相同的功能时，可以使用装饰器模式。这样可以将相同的功能封装在装饰器中，以便于复用和管理。


代码实现
该示例代码中，Shape 是一个接口，定义了一个 draw 方法，表示绘制图形的操作。Circle 是一个实现 Shape 接口的类，表示一个圆形。
ShapeDecorator 是一个装饰器抽象类，实现了 Shape 接口，并包含一个 Shape 类型的变量 decoratedShape，表示要装饰的对象。RedShapeDecorator 是一个具体的装饰器类，继承了 ShapeDecorator 类，并实现了 draw 方法，在绘制图形时添加了一个红色的边框。
在 main 方法中，我们创建了原始对象 Circle，以及两个装饰器对象 RedShapeDecorator，分别装饰了 Circle 和 Rectangle 对象。通过调用 draw 方法，我们可以看到对象被动态地添加了一个红色的边框，而不需要修改原有的代码。
